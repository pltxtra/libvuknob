#!/bin/bash

PROJECT_NAME=libvuknob
PROJECT_NAMESPACE=com.holidaystudios.libvuknob

function usage {
    echo
    echo "Configure script for $PROJECT_NAME"
    echo
    echo "usage:"
    echo
    echo "$0 -h"
    echo "         : prints this help text"
    echo "$0 --help"
    echo "         : prints this help text"
    echo "$0 --ndk-path <path> --sdk-path <path> --libsvgandroid-path <path> --libkamoflage-path <path> --target-platform <android target platform> --bootstrap"
    echo "         : create a Makefile, --boostrap will automatically download and compile prerequsite libraries"
    echo
    echo
}

function run_checksum {
    echo $1 | md5sum -c
    if [ $? -ne 0 ]; then
	echo Checksum failed. Abort.
	exit 1
    fi
    echo Checksum was confirmed.
}

function do_fail {
    echo
    echo "Failed to build $1."
    echo "Abort."
    echo
    exit 1
}

function do_compile {
    ./configure --enable-shared=no --prefix=$TARGET_DIR --host=arm-linux
    if [ $? -ne 0 ]; then
	fail $1
    fi
    make
    if [ $? -ne 0 ]; then
	fail $1
    fi
    make install
    if [ $? -ne 0 ]; then
	fail $1
    fi
}

function do_libogg {
    tar -xf libogg-1.3.2.tar.gz
    pushd libogg-1.3.2
    do_compile libogg
    popd
}

function do_libvorbis {
    tar -xf libvorbis-1.3.5.tar.gz
    pushd libvorbis-1.3.5
    do_compile libvorbis
    popd
}

function do_asio {
    tar -xf asio-1.10.6.tar.bz2
}

function findsmallest {
    local REQUESTED=`echo $TARGET_PLATFORM | cut -d '-' -f 2-`
    local LIST=`ls $NDK_PATH/platforms/ | cut -d '-' -f 2- | sort`
    local RESULT=0

    for PLF in $LIST ; do
	if [ $PLF -lt $REQUESTED ]; then
	    local RESULT=$PLF
	fi
    done

    echo "android-$RESULT"
}

function prepare_toolchain {
    mkdir -p prereqs
    pushd prereqs

    $NDK_PATH/build/tools/make-standalone-toolchain.sh --platform=$NDK_PLATFORM --toolchain=arm-linux-androideabi-4.9 --install-dir=$PWD/standalone-toolchain-4.9

    popd
}

function do_bootstrap {
    rm -rf prereqs

    prepare_toolchain

    pushd prereqs

    export PATH=$PWD/standalone-toolchain-4.9/bin:$PATH
    export CC=arm-linux-androideabi-gcc
    export CXX=arm-linux-androideabi-g++
    export TARGET_DIR=$PWD

    wget http://downloads.xiph.org/releases/ogg/libogg-1.3.2.tar.gz
    run_checksum "b72e1a1dbadff3248e4ed62a4177e937 ./libogg-1.3.2.tar.gz"
    wget http://downloads.xiph.org/releases/vorbis/libvorbis-1.3.5.tar.gz
    run_checksum "7220e089f3be3412a2317d6fde9e3944 ./libvorbis-1.3.5.tar.gz"
    wget http://downloads.sourceforge.net/project/asio/asio/1.10.6%20%28Stable%29/asio-1.10.6.tar.bz2
    run_checksum "85d014a356a6e004cd30ccd4c9b6a5c2 ./asio-1.10.6.tar.bz2"

    do_libogg
    do_libvorbis
    do_asio

    popd
}
function do_init {
    mkdir -p build
    rm -rf build/*
    pushd build

    PATH=$PATH:$SDK_PATH/tools
    PATH=$PATH:$SDK_PATH/platform-tools

    android create lib-project --name $PROJECT_NAME --target $TARGET_PLATFORM --path ./ --package $PROJECT_NAMESPACE

    ln -s $LIBSVGANDROID_PATH/export/libsvgandroid.jar libs/
    ln -s $LIBKAMOFLAGE_PATH/export/libkamoflage.jar libs/
    if [ ! -L ../libsvgandroid ]; then
	ln -s $LIBSVGANDROID_PATH/ ../libsvgandroid
    fi
    if [ ! -L ../libkamoflage ]; then
	ln -s $LIBKAMOFLAGE_PATH/ ../libkamoflage
    fi
    rmdir src
    ln -s ../src_jar ./src
    ln -s ../src_jni ./jni

    cat <<EOF > Makefile
# Autogenerated Makefile

PATH := \$(PATH):$SDK_PATH/tools
PATH := \$(PATH):$SDK_PATH/platform-tools

clean:
	rm -rf bin/*
	rm -rf obj/*
	rm -rf libs/arm*

ndkbuild:
	$NDK_PATH/ndk-build TARGET_PLATFORM=$NDK_PLATFORM

release: ndkbuild releasebuild
	ant release

debug: ndkbuild
	ant debug

EOF

    popd

    cat <<EOF > Makefile
# Autogenerated Makefile

BUILDDIR = build

help:
	@echo "Usage:"
	@echo
	@echo "make <target>"
	@echo
	@echo "Available targets:"
	@echo
	@echo "    help    : this text"
	@echo "    release : make a release build"
	@echo "    debug   : make a debug build"
	@echo "    clean   : cleanup build"

clean:
	cd \$(BUILDDIR); \$(MAKE) clean
	rm -rf export

buildtimedata: VERSION
	@echo "#define \`cat VERSION\`" > \$(BUILDDIR)/build_time_data.hh
	@echo "#define BUILD_AT_SECONDS__SINCE \"`date +%s`\"" >> \$(BUILDDIR)/build_time_data.hh

releasebuild: buildtimedata
	cd \$(BUILDDIR); \$(MAKE) release

debugbuild: buildtimedata
	cd \$(BUILDDIR); \$(MAKE) debug

export:
	@printf "\\n\\nExporting to ./export\\n\\n"
	@mkdir -p export
	@rm -rf export/*
	@cp \$(BUILDDIR)/bin/classes.jar export/$PROJECT_NAME.jar
	@find \$(BUILDDIR)/libs/ | grep \.so | cut -d / -f 3- | awk '{print "install -D \$(BUILDDIR)/libs/" \$\$0 " export/" \$\$0}' | bash

release: releasebuild export
	@echo "releasebuild FINISHED"

debug: debugbuild export
	@echo "debugbuild FINISHED"

EOF
}

if [ "$1" = "-h" ]; then
    echo "Help:"
    usage
    exit 0
fi

if [ "$1" = "--help" ]; then
    echo "Help:"
    usage
    exit 0
fi

if [ "$#" -lt 10 ]; then
    echo "Wrong number of arguments"
    usage
    exit 1
fi

if [ "$1" != "--ndk-path" ]; then
    echo "Wrong first argument."
    usage
    exit 1
fi

if [ "$3" != "--sdk-path" ]; then
    echo "Wrong third argument."
    usage
    exit 1
fi

if [ "$5" != "--libsvgandroid-path" ]; then
    echo "Wrong fifth argument."
    usage
    exit 1
fi

if [ "$7" != "--libkamoflage-path" ]; then
    echo "Wrong seventh argument."
    usage
    exit 1
fi

if [ "$9" != "--target-platform" ]; then
    echo "Wrong ninth argument."
    usage
    exit 1
fi

NDK_PATH=${2}
SDK_PATH=${4}
LIBSVGANDROID_PATH=${6}
LIBKAMOFLAGE_PATH=${8}
TARGET_PLATFORM=${10}

NDK_PLATFORM=$(findsmallest $TARGET_PLATFORM)
echo "Found nearest compatible NDK platform $NDK_PLATFORM (requested: $TARGET_PLATFORM)"

if [ "$#" -eq 11 ]; then
    if [ "${11}" != "--bootstrap" ]; then
	echo "Wrong eleventh argument."
	usage
	exit 1
    fi

    do_bootstrap
else
    prepare_toolchain
fi

do_init

echo
